import { expect } from 'chai'
import { shallow } from 'enzyme'
import sinon from 'sinon'
import { describe, it, beforeEach } from 'storybook-addon-specifications'
import React from 'react'
import Stepper from './Stepper'

const test = () => (
  describe('Stepper', () => {
    let wrapper
    let childWrapper
    let onClick
    beforeEach(() => {
      onClick = sinon.spy()
      wrapper = shallow(<Stepper
        onClick={onClick}
        steps={['step1', 'step2', 'step3', 'step4']}
        active={2}
      />)
      childWrapper = shallow(<div
        key="step1"
        onClick={onClick('step1')}
        onKeyDown={() => { /* no-op */ }}
      />)
    })
    it('renders the component', () => {
      expect(wrapper).to.exist
    })
    it('has prop steps type of array with length 4', () => {
      expect(wrapper.props().children[1].length).to.equal(4)
    })
    it('the active item in the array should have a blue color', () => {
      expect(wrapper.props().children[1][1].props.style).to.include({ backgroundColor: '#3B9ECF' })
    })
    it('the non-active item in the array should have a grey color', () => {
      expect(wrapper.props().children[1][0].props.style).to.include({ backgroundColor: '#BFBFBF' })
    })
    it('should call onClick when clicked', () => {
      childWrapper.simulate('click')
      expect(onClick.callCount).to.equal(1)
    })
    it('onClick should receive step1 string as argument', () => {
      childWrapper.simulate('click')
      expect(onClick.getCall(0).args).to.include('step1')
    })
    it('onClick should not receive step2 as argument', () => {
      childWrapper.simulate('click')
      expect(onClick.getCall(0).args).to.not.equal('step2')
    })
  })
)

export default test
