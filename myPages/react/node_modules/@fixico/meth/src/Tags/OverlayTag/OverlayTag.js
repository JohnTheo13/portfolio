import React, { Component } from 'react'
import PropTypes from 'prop-types'
import { Tooltip, OverlayTrigger } from 'react-bootstrap'
import { P, Icon } from '../../index'
import theme from '../../theme'

const colors = {
  premium: {
    font: theme.black,
    fontHover: theme.yellow,
    backgroundHover: theme.black,
    border: theme.yellow,
  },
  red: {
    font: theme.errorMedium,
    fontHover: theme.white,
    backgroundHover: theme.errorMedium,
    border: theme.errorMedium,
  },
  blue: {
    font: theme.infoMedium,
    fontHover: theme.white,
    backgroundHover: theme.infoMedium,
    border: theme.infoMedium,
  },
  green: {
    font: theme.successMedium,
    fontHover: theme.white,
    backgroundHover: theme.successMedium,
    border: theme.successMedium,
  },
  yellow: {
    font: theme.warningMedium,
    fontHover: theme.white,
    backgroundHover: theme.warningMedium,
    border: theme.warningMedium,
  },
  custom: props => (
    {
      font: props.fontColor,
      fontHover: props.fontHover,
      backgroundHover: props.fontColor,
      border: props.fontColor,
    }
  ),
}


const tagStyle = (color, hover) => {
  const backgroundColor = hover ? color.backgroundHover : theme.white
  const borderColor = hover ? color.font : color.border
  return {
    display: 'inline-block',
    whiteSpace: 'nowrap',
    border: `1px solid ${borderColor}`,
    borderRadius: theme.borderRadius,
    padding: '4px 8px',
    marginRight: '6px',
    marginTop: '6px',
    backgroundColor,
    paddingRight: '8px',
  }
}

const fontStyle = (color, hover) => {
  const font = hover ? color.fontHover : color.font
  return {
    color: font,
    fontSize: theme.fontSizeXxs,
    float: 'left',
  }
}

const icon = (props) => {
  const fill = props.hover ? props.color.fontHover : props.color.font
  return {
    width: '12px',
    height: '12px',
    float: 'left',
    marginRight: '6px',
    fill,
  }
}

class OverlayTag extends Component {
  static propTypes = {
    name: PropTypes.string.isRequired,
    description: PropTypes.string.isRequired,
    trigger: PropTypes.oneOfType([
      PropTypes.string,
      PropTypes.array,
    ]),
    placement: PropTypes.string,
    icon: PropTypes.string,
    theme: PropTypes.string,
    fontColor: PropTypes.string,
    style: PropTypes.object,
  }

  static defaultProps = {
    trigger: ['focus', 'hover', 'click'],
    placement: 'bottom',
    theme: 'green',
    icon: undefined,
    fontColor: undefined,
    style: undefined,
  }

  state = { hover: false }


  hover(val) {
    this.setState({ hover: val })
  }

  renderIcon(props, color) {
    return <Icon viewBox={props.viewBox} style={icon} color={color} hover={this.state.hover} name={`${props.icon}_icon`} />
  }

  renderTooltip(description) {
    return <Tooltip id="tooltip">{description}</Tooltip>
  }

  render() {
    const color = this.props.fontColor ? colors.custom(this.props) : colors[this.props.theme]
    return (
      <OverlayTrigger
        trigger={this.props.trigger}
        rootClose
        placement={this.props.placement}
        overlay={this.renderTooltip(this.props.description)}
      >
        <div
          onMouseOver={() => this.hover(true)}
          onFocus={() => this.hover(true)}
          onTouchStart={() => this.hover(true)}
          onMouseOut={() => this.hover(false)}
          onBlur={() => this.hover(false)}
          onTouchEnd={() => this.hover(false)}
          style={{ ...tagStyle(color, this.state.hover), ...this.props.style }}
        >
          {this.props.icon &&
            this.renderIcon(this.props, color)
          }
          <P
            bold
            noMargin
            style={fontStyle(color, this.state.hover)}
          >{this.props.name}
          </P>
        </div>
      </OverlayTrigger>
    )
  }
}

export default OverlayTag
