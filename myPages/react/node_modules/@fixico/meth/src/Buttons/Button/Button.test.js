import { expect } from 'chai'
import sinon from 'sinon'
import { describe, it, beforeEach } from 'storybook-addon-specifications'
import { shallow } from 'enzyme'
import React from 'react'
import theme from '../../theme'
import Button from './Button'

const test = () => (
  describe('Buttons tests', () => {
    let wrapper
    let onClick
    beforeEach(() => {
      onClick = sinon.spy()
      wrapper = shallow(<Button onClick={onClick} size="small" tag="primary" >Button</Button>)
    })
    it('should render button', () =>
      expect(wrapper.find('button')).to.have.length(1))
    it('should render small button', () => {
      wrapper.setProps({ size: 'small' })
      expect(wrapper.find('button').prop('style')).to.have.deep.property('height', 30)
    })
    it('should render medium button', () => {
      wrapper.setProps({ size: 'medium' })
      expect(wrapper.find('button').prop('style')).to.have.deep.property('height', 42)
    })
    it('should render large button', () => {
      wrapper.setProps({ size: 'large' })
      expect(wrapper.find('button').prop('style')).to.have.deep.include({ height: 50, fontSize: 19, lineHeight: '23px' })
    })
    it('checks Button click event', () => {
      wrapper.find('button').simulate('click')
      expect(onClick.callCount).to.equal(1)
    })
    it('checks Button click event when disabled', () => {
      wrapper.setProps({ disabled: true })
      wrapper.find('button').simulate('click')
      expect(onClick.callCount).to.equal(0)
    })
    it('should render primary button', () => {
      expect(wrapper.find('button').prop('style')).to.have.deep.include({ backgroundColor: theme.green, color: theme.white })
    })
    it('should render secondary button', () => {
      wrapper.setProps({ tag: 'secondary' })
      expect(wrapper.find('button').prop('style').color).to.equal(theme.black)
      expect(wrapper.find('button').prop('style').border).to.equal(`1px solid ${theme.greyMedium}`)
      expect(wrapper.find('button').prop('style').boxShadow).to.equal('none')
    })
    it('should render outlinePrimary button', () => {
      wrapper.setProps({ tag: 'outlinePrimary' })
      expect(wrapper.find('button').prop('style')).to.have.deep.include({
        backgroundColor: theme.white, color: theme.green, boxShadow: 'none', border: `1px solid ${theme.green}`,
      })
    })
    it('should render cta button', () => {
      wrapper.setProps({ tag: 'cta' })
      expect(wrapper.find('button').prop('style')).to.have.deep.include({
        backgroundColor: theme.yellow, color: theme.black, boxShadow: theme.boxShadow, border: 'none',
      })
    })
    it('should render outlineCta button', () => {
      wrapper.setProps({ tag: 'outlineCta' })
      expect(wrapper.find('button').prop('style')).to.have.deep.include({
        backgroundColor: theme.white, color: theme.yellow, boxShadow: 'none', border: `1px solid ${theme.yellow}`,
      })
    })
  })
)

export default test
